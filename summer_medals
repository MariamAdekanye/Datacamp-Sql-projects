create table summer_medals(year	INTEGER,
city VARCHAR,
sport	VARCHAR,
discipline	VARCHAR,
athlete	VARCHAR,
country	VARCHAR,
gender	VARCHAR,
event	VARCHAR,
medal	VARCHAR
);

select *
from summer_medals


WITH country_medals AS (
  SELECT country, COUNT(*) AS medal_count
  FROM summer_medals
  GROUP BY country
)
  
SELECT
  country,
  medal_count,
  -- Split athletes into thirds by their earned medals
  NTILE(4) OVER (ORDER BY medal_count DESC) AS quartile
FROM country_medals
ORDER BY medal_count DESC, country;

---- Assign numbers to each row
SELECT *,
  ROW_NUMBER() OVER() AS Row_N
FROM Summer_Medals
ORDER BY Row_N ASC;
 
--- Comparing Company current and previous rows to know the current champion
----starting with a cte
WITH Weightlifting_Gold AS (
  SELECT Year,
    Country AS champion
  FROM Summer_Medals
  WHERE
    Discipline = 'Weightlifting' AND
    Event = '69KG' AND
    Gender = 'Men' AND
    Medal = 'Gold')
SELECT
  Year, Champion,
  -- Fetch the previous year's champion
  lag(Champion) OVER
    (order by year ASC) AS Last_Champion
FROM Weightlifting_Gold
ORDER BY Year ASC;

--Partitioning unique values in a column
WITH Tennis_Gold AS (
  SELECT DISTINCT
    Gender, Year, Country
  FROM Summer_Medals
  WHERE
    Year >= 2000 AND
    Event = 'Javelin Throw' AND
    Medal = 'Gold')
 
SELECT
  Gender, Year,
  Country AS Champion,
  -- Fetch the previous year's champion by gender
  lag(Country) OVER (partition by gender
            ORDER BY year ASC) AS Last_Champion
FROM Tennis_Gold
ORDER BY Gender ASC, Year ASC;

----Fetching future rows using lead
WITH Discus_Medalists AS (
  SELECT DISTINCT
    Year,
    Athlete
  FROM Summer_Medals
  WHERE Medal = 'Gold'
    AND Event = 'Discus Throw'
    AND Gender = 'Women'
    AND Year >= 2000)
 
SELECT
  -- For each year, fetch the current and future medalists
  year,
 Athlete,
  lead(Athlete, 3) OVER (ORDER BY year ASC) AS Future_Champion
FROM Discus_Medalists
ORDER BY Year ASC;

---Ranking and partitioning using dense_rank()
WITH Athlete_Medals AS (
  SELECT
    Country, Athlete, COUNT(*) AS Medals
  FROM Summer_Medals
  WHERE
    Country IN ('JPN', 'KOR')
    AND Year >= 2000
  GROUP BY Country, Athlete
  HAVING COUNT(*) > 1)
 
SELECT
  Country,
  -- Rank athletes in each country by the medals they've won
  Athlete,
  Dense_rank() OVER (PARTITION BY Country
                ORDER BY Medals DESC) AS Rank_N
FROM Athlete_Medals
ORDER BY Country ASC, RANK_N ASC;

--- Splitting dataset into pages
WITH Events AS (
  SELECT DISTINCT Event
  FROM Summer_Medals)
  
SELECT
  --- Split up the distinct events into 111 unique groups
  Event,
  ntile(111) OVER (ORDER BY Event ASC) AS Page
FROM Events
ORDER BY Event ASC;

--Using ntile to group into three thirds and finding the average of each third
WITH Athlete_Medals AS (
  SELECT Athlete, COUNT(*) AS Medals
  FROM Summer_Medals
  GROUP BY Athlete
  HAVING COUNT(*) > 1),
  
  Thirds AS (
  SELECT
    Athlete,
    Medals,
    NTILE(3) OVER (ORDER BY Medals DESC) AS Third
  FROM Athlete_Medals)
  
SELECT
  -- Get the average medals earned in each third
  Third,
  avg(Medals) AS Avg_Medals
FROM Thirds
GROUP BY Third
ORDER BY Third ASC;

---Using running total to know the cumulative medals earned
WITH Athlete_Medals AS (
  SELECT
    Athlete, COUNT(*) AS Medals
  FROM Summer_Medals
  WHERE
    Country = 'USA' AND Medal = 'Gold'
    AND Year >= 2000
  GROUP BY Athlete)
 
SELECT
  -- Calculate the running total of athlete medals
  Athlete,
  Medals,
  sum(Medals) OVER (ORDER BY Athlete ASC) AS Max_Medals
FROM Athlete_Medals
ORDER BY Athlete ASC;

---Getting the maximum medals earned by a country to know if they have broken a record
WITH Country_Medals AS (
  SELECT
    Year, Country, COUNT(*) AS Medals
  FROM Summer_Medals
  WHERE
    Country IN ('CHN', 'KOR', 'JPN')
    AND Medal = 'Gold' AND Year >= 2000
  GROUP BY Year, Country)
 
SELECT
  -- Return the max medals earned so far per country
 Year,
  Country,
  Medals,
  Max(Medals) OVER (PARTITION BY Country
                ORDER BY Year ASC) AS Max_Medals
FROM Country_Medals
ORDER BY Country ASC, Year ASC;

---Using range to set the output of a max window function
WITH Scandinavian_Medals AS (
  SELECT
    Year, COUNT(*) AS Medals
  FROM Summer_Medals
  WHERE
    Country IN ('DEN', 'NOR', 'FIN', 'SWE', 'ISL')
    AND Medal = 'Gold'
  GROUP BY Year)
 
SELECT
  -- Select each year's medals
  Year,
  Medals,
  -- Get the max of the current and next years'  medals
  max(Medals) OVER (ORDER BY Year ASC
             ROWS BETWEEN current row
             AND 1 following) AS Max_Medals
FROM Scandinavian_Medals
ORDER BY Year ASC;

Calculating moving average
WITH Russian_Medals AS (
  SELECT
    Year, COUNT(*) AS Medals
  FROM Summer_Medals
  WHERE
    Country = 'RUS'
    AND Medal = 'Gold'
    AND Year >= 1980
  GROUP BY Year)
 
SELECT
  Year, Medals,
  --- Calculate the 3-year moving average of medals earned
 avg(Medals) OVER
    (ORDER BY Year ASC
     ROWS BETWEEN
    2 preceding AND current row) AS Medals_MA
FROM Russian_Medals
ORDER BY Year ASC;

---Partition into group then calculating our moving total so that a group wonâ€™t affect the other
WITH Country_Medals AS (
  SELECT
    Year, Country, COUNT(*) AS Medals
  FROM Summer_Medals
  GROUP BY Year, Country)
 
SELECT
  Year, Country, Medals,
  -- Calculate each country's 3-game moving total
  sum(Medals) OVER
    (PARTITION BY Country
     ORDER BY Year ASC
     ROWS BETWEEN
     2 preceding AND current row) AS Medals_MA
FROM Country_Medals
ORDER BY Country ASC, Year ASC;

Pivoting a table by year column
-- Create the correct extention to enable CROSSTAB
CREATE EXTENSION IF NOT EXISTS tablefunc;
 
SELECT * FROM CROSSTAB($$
  SELECT
    Gender, Year, Country
  FROM Summer_Medals
  WHERE
    Year IN (2008, 2012)
    AND Medal = 'Gold'
    AND Event = 'Pole Vault'
  ORDER By Gender ASC, Year ASC;
-- Fill in the correct column names for the pivoted table
$$) AS ct (Gender VARCHAR,
           "2008" VARCHAR,
           "2012" VARCHAR)
 ORDER BY Gender ASC;

--Pivoted ranking
CREATE EXTENSION IF NOT EXISTS tablefunc;
 
SELECT * FROM CROSSTAB($$
  WITH Country_Awards AS (
    SELECT
      Country,
      Year,
      COUNT(*) AS Awards
    FROM Summer_Medals
    WHERE
      Country IN ('FRA', 'GBR', 'GER')
      AND Year IN (2004, 2008, 2012)
      AND Medal = 'Gold'
    GROUP BY Country, Year)
 
  SELECT
    Country,
    Year,
    RANK() OVER
      (PARTITION BY Year
       ORDER BY Awards DESC) :: INTEGER AS rank
  FROM Country_Awards
  ORDER BY Country ASC, Year ASC;
-- Fill in the correct column names for the pivoted table
$$) AS ct (Country VARCHAR,
           "2004" INTEGER,
           "2008" INTEGER,
           "2012" INTEGER)
 
Order by Country ASC;

--Generating subgroup total using rollup function
-- Count the gold medals per country and gender
SELECT
  Country,
  Gender,
  COUNT(*) AS Gold_Awards
FROM Summer_Medals
WHERE
  Year = 2004
  AND Medal = 'Gold'
  AND Country IN ('DEN', 'NOR', 'SWE')
-- Generate Country-level subtotals
GROUP BY  Country, ROLLUP(Gender)
ORDER BY Country ASC, Gender ASC;

Generating total medals won by each gender and total medal
-- Count the medals per gender and medal type
SELECT
  gender,
  medal,
  count(*) AS Awards
FROM Summer_Medals
WHERE
  Year = 2012
  AND Country = 'RUS'
-- Get all possible group-level subtotals
GROUP BY cube(gender, medal)
ORDER BY Gender ASC, Medal ASC;

---Using coalesce to replace null values
SELECT
  -- Replace the nulls in the columns with meaningful text
  coalesce(Country, 'All countries') AS Country,
  coalesce(Gender, 'All genders') AS Gender,
  COUNT(*) AS Awards
FROM Summer_Medals
WHERE
  Year = 2004
  AND Medal = 'Gold'
  AND Country IN ('DEN', 'NOR', 'SWE')
GROUP BY ROLLUP(Country, Gender)
ORDER BY Country ASC, Gender ASC;

---Compressing results into one column
WITH Country_Medals AS (
  SELECT
    Country,
    COUNT(*) AS Medals
  FROM Summer_Medals
  WHERE Year = 2000
    AND Medal = 'Gold'
  GROUP BY Country),
 
  Country_Ranks AS (
  SELECT
    Country,
    RANK() OVER (ORDER BY Medals DESC) AS Rank
  FROM Country_Medals
  ORDER BY Rank ASC)
 
-- Compress the countries column
SELECT string_agg(Country, ', ')
FROM Country_Ranks
-- Select only the top three ranks
WHERE rank <= 3
